export const jsQuiz = {
    title: 'JS',
    position: 3,
    path: '/jsQuestions',
    name: 'Javascript Quiz',
    questions   : [  
        {
        title: 'Что выведет alert? let str = "Hello"; str.something = 5; alert(str.something); // ?',
        variants:
          ['5',
            'undefined',
            'Будет ошибка',
            ],
        correct: 2,
      },
      {
        title: 'Что выведет этот скрипт? "use strict"; a = null + undefined; alert(a);',
        variants:
          ['null',
            'undefined',
            'NaN',
            'В коде ошибка',
        ],
        correct: 3,
      },
      {
        title: 'Что выведет этот код? if (function f(){}) { alert(typeof f); }',
        variants:
          ['undefined',
            'function',
            'null',
            'object',
            'В коде ошибка',
        ],
        correct: 0,
      },
      {
        title: 'Что выведет этот код? for(let i=0; i<10; i++) { setTimeout(function() { alert(i);  }, 100); }',
        variants:
          ['Числа от 0 до 9.',
            'Числа от 0 до 10.',
            '10 раз число 0.',
            '10 раз число 10.',
            'Ошибка: переменная не определена.',
        ],
        correct: 0,
      },
      {
        title: 'Что делает оператор ===?',
        variants:
          ['Сравнивает по ссылке, а не по значению.',
            'Сравнивает без приведения типа.',
            'Нет такого оператора.',
          
        ],
        correct: 1,
      },
      {
        title: 'Что выведет этот код? let obj = { "0": 1,  0: 2 }; alert( obj["0"] + obj[0] );',
        variants:
          ['2',
            '3',
            '4',
            '12',
            'В коде ошибка',
        ],
        correct: 2,
      },
      {
        title: 'Чему равно 2 && 1 && null && 0 && undefined ?',
        variants:
          ['2',
            '1',
            'null',
            '0',
            'undefined',
            'false',
        ],
        correct: 2,
      },
      {
        title: 'Чему равно 0 || "" || 2 || undefined || true || falsе ?',
        variants:
          ['0',
          '2',
            'undefined',
            'true',
            'false',
        ],
        correct: 1,
      },
      {
        title: 'Чему равен typeof null в режиме use strict?',
        variants:
          ['null',
            'undefined',
            'object',
            'string',
        ],
        correct: 2,
      },
      {
        title: 'Какие конструкции для циклов есть в javascript?',
        variants:
          ['Только две: for и while ',
            'Только одна: for.',
            'Три: for, while и do...while',
           
        ],
        correct: 2,
      },
      {
        title: 'Как расшифровывается JSON?',
        variants:
          ['JavaScript Object Notation ',
            'JavaScript Object Native ',
            'JavaScript Oriented Notation',
            'JavaScript Object Notification',
        ],
        correct: 0,
      },
      {
        title: 'Зачем нужен JSON ?',
        variants:
          ['Формат JSON используется для упорядоченного хранения данных в процессе их обмена между веб-браузером или клиентской частью приложения и сервером или между разными серверами. Более того, благодаря текстовому виду строки, данные JSON можно легко передавать через любые другие каналы обмена информацией в интернете.          ',
            'Технология позволяет получать и модифицировать данные и состояния удаленных приложений, передавая HTTP-вызовы через интернет или любую другую сеть.            ',
            'Формат JSON используется для создания интерфейсов одностраничных и многостраничных приложений, разработки крупных сайтов.            ',
            'Формат JSON используется для избавления от ошибок, связанных с беспорядком в объекте состояния; предсказуемости и понятности работы приложения; более простой отладки и доработки; повышения производительности и работоспособности программы.            ',
        ],
        correct: 0,
      },
      {
        title: 'Что такое REST API  ?',
        variants:
          ['Технология позволяет упорядоченно хранить данные в процессе их обмена между веб-браузером или клиентской частью приложения и сервером или между разными серверами.           ',
            'Технология позволяет получать и модифицировать данные и состояния удаленных приложений, передавая HTTP-вызовы через интернет или любую другую сеть.            ',
            'Технология позволяет создавать интерфейсы одностраничных и многостраничных приложений, разработки крупных сайтов.            ',
            'Технология позволяет избавлять от ошибок, связанных с беспорядком в объекте состояния; предсказуемости и понятности работы приложения; более простой отладки и доработки; повышения производительности и работоспособности программы.            ',
        ],
        correct: 1,
      },
      {
        title: 'Поддерживают ли JSON все платформы? ',
        variants:
          ['Поддерживают почти все платформы благодаря своему текстовому формату  ',
            'Поддерживают почти все платформы благодаря преобразованию код в числа  ',
            'Очень мало платформ поддерживает JSON  ',
        ],
        correct: 0,
      },
      {
        title: 'Как был построен JSON?',
        variants:
          ['JSON построен на двух структурах, которые представляют собой набор пар имя / значение и упорядоченный список значений. Это универсальные структуры данных, такие как объект, массив, строка, число и значение.          ',
            'JSON построен на одной структуре данных - объект  ',
            'JSON построен на трех структурах, которые представляют собой набор пар имя / значение, свойство и упорядоченный список значений . Это универсальные структуры данных, такие как объект, массив, строка, число и значение.',
        
        ],
        correct: 0,
      },
      {
        title: 'Какое из утверждений правильное',
        variants:
          ['JSON быстрее и легче XML.JSON имеет типизированные объекты, тогда как в XML-объектах обычно меньше.В JSON существуют разные типы объектов, такие как целое число, строка, массив и т. Д., Тогда как в XML есть только один тип объекта, который является только String.Данные JSON могут быть легко доступны или доступны как объект JSON, используя в JavaScript, но в XML данные должны быть проанализированы и распределены по переменным с помощью API.В JSON получить значения так же просто, как прочитать их из свойства объекта из кода javascript.          ',
            'XML быстрее и легче JSON.JSON имеет типизированные объекты, тогда как в XML-объектах обычно меньше.В XML существуют разные типы объектов, такие как целое число, строка, массив и т. Д., Тогда как в JSON есть только один тип объекта, который является только String.Данные JSON могут быть легко доступны или доступны как объект JSON, используя в JavaScript, но в XML данные должны быть проанализированы и распределены по переменным с помощью API.В XML получить значения так же просто, как прочитать их из свойства объекта из кода javascript.',
           
        ],
        correct: 0,
      },
      {
        title: 'Какие методы предоставляет JavaScript в JSON?',
        variants:
          ['JavaScript предоставляет методы JSON.stringify для сериализации в JSON и JSON.parse для чтения из JSON.    ',
            'JavaScript предоставляет методы JSON.object для преобразования в объект и JSON.parse для чтения из JSON.   ',
            'JavaScript предоставляет методы JSON.object для преобразования в объект и JSON.stringify для сериализации в JSON.',
           
        ],
        correct: 0,
      },
      {
        title: 'Что такое рекурсия? ',
        variants:
          ['Это вызов функции самой себя, без выхода из функции  ',
            'Это вызов функции самой себя, должен быть обязательно выход из функции (return)   ',
            'Это функция, которая запоминает свои внешние переменные и может получить к ним доступ. ',
            'Это вызов функцией другой функции',
        ],
        correct: 1,
      },
      {
        title: 'Определение какого термина дано? Это специальная внутренняя структура данных, которая содержит информацию о вызове функции. Она включает в себя конкретное место в коде, на котором находится интерпретатор, локальные переменные функции, значение this и прочую служебную информацию.  ',
        variants:
          ['Рекурсия ',
            'Стек',
            'Контекст выполнения',
            'Лексическое окружение',
        ],
        correct: 2,
      },
      {
        title: 'Какие методы предоставляет JavaScript в JSON?',
        variants:
        ['Рекурсия ',
        'Стек',
        'Контекст выполнения',
        'Лексическое окружение',
    ],
        correct: 0,
      },
      {
        title: 'Что такое итерация?',
        variants:
        ['Организация обработки данных, при котором действия повторяются многократно, не приводя при этом к вызовам самих себя ',
        'Организация обработки данных, при котором действия повторяются многократно, приводящим при этом к вызовам самих себя',
        'Это возможность функции получить доступ к внешним данным',
        'Это вызов функцией другой функции ',
    ],
        correct: 0,
      },
      {
        title: 'Выберете правильные утверждения про «остаточные параметры» … ?',
        variants:
        ['Остаточные параметры «…» располагаются в конце списка аргументов функции. Он собирает остальные неуказанные аргументы и делает из них массив.  ',
        'Остаточные параметры «…» располагаются в начале списка аргументов функции. Он собирает остальные неуказанные аргументы и делает из них массив.        ',
        'Остаточные параметры «…» встречаются в вызове функции или где-либо ещё. Он извлекает элементы из массива.',
        
    ],
        correct: 0,
      },
      {
        title: 'Выберете правильное утверждение про «оператор расширения»?',
        variants:
        ['Оператор расширения «…» располагаются в конце списка аргументов функции. Он собирает остальные неуказанные аргументы и делает из них массив.        ',
        'Оператор расширения «…» располагаются в начале списка аргументов функции. Он собирает остальные неуказанные аргументы и делает из них массив.        ',
        'Оператор расширения «…» встречается в вызове функции или где-либо ещё. Он извлекает элементы из массива.',
    ],
        correct: 2,
      },
      {
        title: 'Выберите правильное утверждение  ',
        variants:
        ['Остаточные параметры используются, чтобы создавать новые функции с неопределённым числом аргументов ',
        'С помощью остаточных параметров можно вставить массив в функцию, которая по умолчанию работает с обычным списком аргументов. ',
    ],
        correct: 0,
      },
      {
        title: 'Выберите правильное утверждение  ',
        variants:
        ['Операторы расширения используются, чтобы создавать новые функции с неопределённым числом аргументов ',
        'С помощью операторов расширения можно вставить массив в функцию, которая по умолчанию работает с обычным списком аргументов. ',
    ],
        correct: 1,
      },
      {
        title: 'Список событий, подлежащих обработке формируют очередь событий. Когда стек освобождается, движок может обрабатывать событие из очереди. Где координируется этот процесс ?   ',
        variants:
        ['Нигде, события могут обрабатываться одновременно',
        'В цикле событий (event loop)',
        'В замыкании',
        'В стеке',
    ],
        correct: 1,
      },
      {
        title: 'Назовите типы данных в Java Script ?',
        variants:
        ['Примитивные : Boolean, null, underfined, number, string, array, symbol Непримитивные: function , object ',
        ' Примитивные : Boolean, null, undefined, number, string, array, bigint, symbol. Непримитивные: object, function ',
        'Примитивные : Boolean, null, underfined, number, string, array, bigint, symbol, object Непримитивные: function  ',
        'Примитивные : Boolean, null, underfined, number, string, array, symbol, object Непримитивные: function  ',
    ],
        correct: 1,
      },
      {
        title: 'Чем отличается null от undefined ?',
        variants:
        ['Null обозначает нулевое или «пустое» значение. Undefined - свойство глобального объекта; переменная, не имеющая присвоенного значения    ',
        'Undefined обозначает нулевое или «пустое» значение. Null - свойство глобального объекта; переменная, не имеющая присвоенного значения   ',
    ],
        correct: 0,
      },
      {
        title: 'Про какую переменную идет речь? Переменные ... не имеют блочной области видимости, они ограничены, как минимум, телом функции. Объявления (инициализация) переменных ... производится в начале исполнения функции (или скрипта для глобальных переменных).',
        variants:
          ['let ',
            'var',
            'const',
            'Подходит ко всем',
        ],
        correct: 1,
      },
      
      {
        title: 'Что такое Замыкание?',
        variants:
          ['Замыкание – это функция, которая запоминает свои внешние переменные и может получить к ним доступ. Все функции в JavaScript являются замыканиями. ',
            'Замыкание — это вызов функцияей самой себя  ',
            'Замыкание — это возможность оборачивать компоненту и следить за входящими пропсами  ',
            'Замыкание — функция, которая ссылается на свободные переменные в области видимости другой функции ',
        ],
        correct: 0,
      },
      {
        title: 'Что такое IIFE «immediately-invoked function expressions»',
        variants:
          ['Вызов функции самой себя',
            'Функция, запускаемая сразу после объявления',
        ],
        correct: 1,
      },
      {
        title: 'В чем отличие Function Expression от Function Declaration?',
        variants:
          ['Function Expression  – функция, объявленная в основном потоке кода, они создаются интерпретатором до выполнения кода.. Function Declaration – объявление функции в контексте какого-либо выражения, например присваивания.    ',
            'Function Declaration – функция, объявленная в основном потоке кода, они создаются интерпретатором до выполнения кода.. Function Expression – объявление функции в контексте какого-либо выражения, например присваивания.        ',
        ],
        correct: 1,
      },
      {
        title: 'Зачем нужен метод функции apply? ',
        variants:
          ['Метод apply() вызывает функцию с указанным значением this и аргументами, предоставленными в виде массива (либо массивоподобного объекта (en-US)).     ',
            'Метод apply() создаёт новую функцию, которая при вызове устанавливает в качестве контекста выполнения this предоставленное значение. В метод также передаётся набор аргументов, которые будут установлены перед переданными в привязанную функцию аргументами при её вызове.            ',
            'Метод apply() вызывает функцию с указанным значением this и индивидуально предоставленными аргументами.  ',
            'Метод apply декомпилирует функцию и возвращает строку, включающую ключевое слово function, список аргументов, фигурные скобки и исходный код тела функции.',
        ],
        correct: 0,
      },
      {
        title: 'Зачем нужен метод функции bind?',
        variants:
          ['Метод bind() вызывает функцию с указанным значением this и аргументами, предоставленными в виде массива (либо массивоподобного объекта (en-US)).   ',
            'Метод bind() создаёт новую функцию, которая при вызове устанавливает в качестве контекста выполнения this предоставленное значение. В метод также передаётся набор аргументов, которые будут установлены перед переданными в привязанную функцию аргументами при её вызове.   ',
            'Метод bind() вызывает функцию с указанным значением this и индивидуально предоставленными аргументами. ',
            'Метод bind декомпилирует функцию и возвращает строку, включающую ключевое слово function, список аргументов, фигурные скобки и исходный код тела функции.',
        ],
        correct: 1,
      },
      {
        title: 'Зачем нужен метод функции call?',
        variants:
          ['Метод call() вызывает функцию с указанным значением this и аргументами, предоставленными в виде массива (либо массивоподобного объекта (en-US)).   ',
            'Метод call() создаёт новую функцию, которая при вызове устанавливает в качестве контекста выполнения this предоставленное значение. В метод также передаётся набор аргументов, которые будут установлены перед переданными в привязанную функцию аргументами при её вызове.   ',
            'Метод call() вызывает функцию с указанным значением this и индивидуально предоставленными аргументами. ',
            'Метод call декомпилирует функцию и возвращает строку, включающую ключевое слово function, список аргументов, фигурные скобки и исходный код тела функции. ',
        ],
        correct: 2,
      },
      {
        title: 'Зачем нужен метод функции toString?',
        variants:
          ['Метод toString() вызывает функцию с указанным значением this и аргументами, предоставленными в виде массива (либо массивоподобного объекта (en-US)). ',
            'Метод toString() создаёт новую функцию, которая при вызове устанавливает в качестве контекста выполнения this предоставленное значение. В метод также передаётся набор аргументов, которые будут установлены перед переданными в привязанную функцию аргументами при её вызове.  ',
            'Метод toString() вызывает функцию с указанным значением this и индивидуально предоставленными аргументами.  ',
            'Метод toString декомпилирует функцию и возвращает строку, включающую ключевое слово function, список аргументов, фигурные скобки и исходный код тела функции.',
        ],
        correct: 3,
      },









      {
        title: 'Какое из утверждений правильное',
        variants:
          ['null',
            'undefined',
            'NaN',
            'В коде ошибка',
        ],
        correct: 3,
      },


    
    ]
}

export const htmlQuiz = {
    title: 'HTML',
    position: 1,
    path: '/htmlQuestions',
    name: 'HTML Quiz',
    questions   : [ 
      {
        title: 'Как расшифровывается аббревиатура HTML? ',
        variants:
          ['Hyper Text Modul Language',
            'Hyper Text Markup Language',
            'Hyper Test Markup Language',
            'Hyperlink Markup Language',
            ],
        correct: 1,
      },
      {
        title: 'Какой из следующих тегов table используется для создания строки таблицы?',
        variants:
          ['<th>',
            '<td>',
            '<tr>',
            '<table>',
            ],
        correct: 2,
      },
      {
        title: 'Какой из следующих вариантов не является HTML атрибутом?',
        variants:
          ['alt',
            'target',
            'fontSize',
            'id',
            ],
        correct: 2,
      },
      {
        title: 'Какую разметку необходимо использовать для создания упорядоченного списка?',
        variants:
          ['<ul>',
            '<ol>',
            ],
        correct: 1,
      },
      {
        title: 'Какой необязательный тег table используется для добавления краткого описания наверху таблицы?        ',
        variants:
          ['description',
            'caption',
            'title',
            
            ],
        correct: 1,
      },
      {
        title: 'Какой HTML form input используется для представления нескольких вариантов с возможностью выбора только одного из них?',
        variants:
          ['<input type="text">',
            '<input type="radio">',
            '<input type="checkbox">',
            
            ],
        correct: 1,
      },
      {
        title: 'Какой HTML form input используется для отправки на сервер информацию о form?',
        variants:
          ['<input type="server">',
            '<input type="submit">',
            '<input type="send">',
            '<input type="mail">  ',
            ],
        correct: 1,
      },
      {
        title: 'Какую разметку необходимо использовать для создания неупорядоченного списка?        ',
        variants:
          ['<ul>',
            '<ol>',
            '<li>',
            
            ],
        correct: 0,
      },
      {
        title: 'Можно ли использовать table(таблицу) внутри table?',
        variants:
          ['Да',
            'Нет',
          
            ],
        correct: 0,
      },
      {
        title: 'Какой элемент не имеет закрывающий тег?',
        variants:
          ['tag',
            'empty tag',
            'closed tag ',
            ],
        correct: 1,
      },
      {
        title: 'Какой из следующих тегов table используется для создания ячеек table data?',
        variants:
          ['<td>',
            '<th>',
            '<tr>',
            '<table>',
            ],
        correct: 0,
      },
      {
        title: 'Какой элемент не является пустым?',
        variants:
          ['<br />',
            '<p>',
            '<img />',
            '<hr />',
            ],
        correct: 1,
      },
      {
        title: 'Какой тег указывает поле form, где пользователь может ввести больше текста? ',
        variants:
          ['<textarea>',
            '<button> ',
            '<a>',
            '<label>',
            ],
        correct: 0,
      },
      {
        title: 'Чем отличие <header> от <head>? ',
        variants:
          ['<head></head> это блок служебной информации внутри которого располагаются теги с описанием страницы и ключевыми словами (теги meta), заголовок страницы (тег title) и подключение внешних стилей (тег link), которая непосредственно на странице не отображается. Располагается он между <html> и <body>. А тег <header></header> - это новый тег стандарта html5, находится непосредственно внутри <body></body>, содержимое его отображается на сайте и служит т.н. логической "шапкой" сайта, внутри которого размещается логотип и т.п. ',
            '<header></header> это блок служебной информации внутри которого располагаются теги с описанием страницы и ключевыми словами (теги meta), заголовок страницы (тег title) и подключение внешних стилей (тег link), которая непосредственно на странице не отображается. Располагается он между <html> и <body>. А тег <head></head> - это новый тег стандарта html5, находится непосредственно внутри <body></body>, содержимое его отображается на сайте и служит т.н. логической "шапкой" сайта, внутри которого размещается логотип и т.п.             ',
         
            ],
        correct: 0,
      },
      {
        title: 'Назовите теги HTML? ',
        variants:
          ['<borge>/<border>, <html></html>, <head></head>, <body></body>',
            '<grid></grid>, <html>/<html>, <body></body>, <title>/<title>',
            '<html></html>, <head></head>, <body></body>, <title></title>',
            '<html></html>, <head></head>, <title></title>, <flex></flex>       ',
            ],
        correct: 2,
      },
      {
        title: 'Чем отличается Элемент от Тега ? ',
        variants:
          ['Это одно и тоже   ',
            'Теги открывают или закрывают элементы в исходном коде, тогда как элементы являются частью DOM, объектной моделью документа для отображения страницы в браузере. ',
            'Элементы открывают или закрывают теги в исходном коде, тогда как теги являются частью DOM, объектной моделью документа для отображения страницы в браузере.  ',
            
            ],
        correct: 1,
      },
    
    ]
}

export const cssQuiz = {
    title: 'CSS',
    position: 2,
    path: '/cssQuestions',
    name: 'CSS Quiz',
    questions   : [
        {
        title: 'Как расшифровывается css?',
        variants:
          ['Cascading Style Sheets',
            'Cascading Style Statement',
            'Cascading Style Stage',
        ],
        correct: 0,
      },
      {
        title: 'Что такое Специфичность в css?',
        variants:
          ['Специфичность - это способ, с помощью которого браузеры определяют, какие значения свойств CSS наиболее соответствуют элементу и, следовательно, будут применены.',
            'Специфичность - идентификатор действия, которое будет применено к элементу',
            'Специфичность описывает как именно свойство будет обработано браузером',
        ],
        correct: 0,
      },
      {
        title: 'Дайте опредление CSS',
        variants:
          ['CSS - это код, который используется для структурирования и отображения веб-страницы и её контента.  ',
            'CSS - "каскадные таблицы стилей", формальный язык описания внешнего вида документа, написанного с использованием языка разметки.',
            'CSS - это язык разметки, который мы используем для визуального и смыслового структурирования нашего web контента',
        ],
        correct: 1,
      },
      {
        title: 'В CSS мы, говоря упрощённо, имеем два типа элементов. Каких? ',
        variants:
          ['Изображения и объекты',
            'Блочный и строчный',
            'Скрипты и списки',
            'Формы и объекты ',
        ],
        correct: 1,
      },
      {
        title: 'Какой тип элемента в css описан? "Начнётся с новой строки.Будет расширяться вдоль строки таким образом, чтобы заполнить всё пространство, доступное в её контейнере. В большинстве случаев это означает, что блок станет такой же ширины, как и его контейнер, заполняя 100% доступного пространства.Будут применяться свойства width и height. Внешние и внутренние отступы, рамка будут отодвигать от него другие элементы."',
        variants:
          ['Форма',
            'Объект ',
            'Блочный',
            'Строка',
        ],
        correct: 2,
      },
      {
        title: 'Какой тип элемента в css описан? "Он не будет начинаться с новой строки. Свойства width и height не будут применяться. Вертикальные внешние и внутренние отступы, рамки будут применяться, но не будут отодвигать другие строчные элементы. Горизонтальные внешние и внутренние отступы, рамки будут применяться и будут отодвигать другие строчные элементы."',
        variants:
          ['Форма',
            'Объект',
            'Блок',
            'Строчный',
        ],
        correct: 3,
      },
      {
        title: 'По умолчанию элемент <a>, используемый для ссылок, <span>, <em> и <strong> это .... элемент. Заполните пропуск',
        variants:
          ['Блочный',
            'Строчный',
            'Объектно-ориентированный',
            'Табличный',
        ],
        correct: 1,
      },
      {
        title: 'Если не изменить намеренно тип отображения, то такие элементы, как заголовки (например, <h1>) и <p>, все используют ...... как свой внешний тип отображения по умолчанию.Заполните пропуск       ',
        variants:
          ['Блок',
            'Строку',
            'Форму',
            'Объект',
        ],
        correct: 0,
      },    
      {
        title: 'Что значит схлопывание внешних отступов в Css? ',
        variants:
          [' Если у вас есть два элемента, внешние отступы которых соприкасаются, и оба значения margin положительные, то эти значения будут объединены в одно, равное меньшему из двух значений. А если одно или оба значения отрицательны, то сумма отрицательных значений будет вычтена из общей суммы.          ',
            'Если у вас есть два элемента, внешние отступы которых соприкасаются, и оба значения margin положительные, то эти значения будут объединены в одно, равное большему из двух значений. А если одно или оба значения отрицательны, то сумма отрицательных значений будет вычтена из общей суммы.            ',
            'Если у вас есть два элемента, внешние отступы которых соприкасаются, и оба значения margin положительные, то эти значения будут объединены в одно, равное большему из двух значений. А если одно или оба значения отрицательны, то сумма отрицательных значений будет прибавлена к общей суммы. ',
            ' Если у вас есть два элемента, внешние отступы которых соприкасаются, и оба значения margin положительные, то эти значения будут объединены в одно, равное большему из двух значений. А если одно или оба значения отрицательны, то разница отрицательных значений будет вычтена из общей суммы.            ',
        ],
        correct: 1,
      },    
      {
        title: 'К какому элементу относятся такие характеристики? "Применяются свойства width и height.Использование padding, margin и border приведёт к тому, что другие элементы будут отодвинуты от нашего элемента." Он не перенесётся на новую строку и станет больше, чем его содержимое, только если вы явно зададите свойства width и height.',
        variants:
          ['Элемент с float: inline-block   ',
            'Элемент с position: inline-block',
            'Элемент с display: inline-block',
            'Элемент с inline-block: inline-block',
        ],
        correct: 2,
      },
      {
        title: 'Какое опредление описывается? "Порядок следования правил в CSS имеет значение; когда применимы два правила, имеющие одинаковую специфичность, используется то, которое идёт в CSS последним."        ',
        variants:
          ['Наследование',
            'Каскад',
            'Специфичность',
        ],
        correct: 1,
      },
      {
        title: 'Заполните пропуск " .... определяет, как браузер решает, какое именно правило применяется в случае, когда несколько правил имеют разные селекторы, но, тем не менее, могут быть применены к одному и тому же элементу."         ',
        variants:
          ['Наследование',
            'Каскад',
            'Специфичность',
        ],
        correct: 2,
      },
      {
        title: 'Какое опредление описывается? "Некоторые значения свойства CSS, установленные для родительских элементов наследуются их дочерними элементами, а некоторые нет."        ',
        variants:
          ['Наследование',
            'Каскад',
            'Специфичность',
        ],
        correct: 0,
      },
      {
        title: 'Какие специальные универсальные значения свойства для контроля наследования есть в CSS?',
        variants:
          ['В СSS нет специальных универсальных значений свойства для контроля наследования',
            'inherit, initial',
            'inherit, initial, unset, revert',
            'initial, unset, revert',
        ],
        correct: 2,
      },
      {
        title: 'Вот три фактора, перечисленные в порядке возрастания важности. Следующий отменяет предыдущий. Какой порядок правильный?',
        variants:
          ['Важность, Порядок наследования, Специфичность',
            'Порядок наследования,  Важность, Специфичность',
            'Специфичность, Важность, Порядок наследования',
            'Порядок наследования, Специфичность, Важность',
        ],
        correct: 3,
      },
      {
        title: 'Существует специальный элемент CSS, который используется, чтобы сделать конкретное свойство и значение самыми специфичными, таким образом переопределяя нормальные правила каскада?        ',
        variants:
          ['Нет, правила каскада невозможно преодолеть',
            'Да, этот элемнет !important',
        ],
        correct: 1,
      },      
      {
        title: 'Расположите элементы в порядке ВОЗРАСТАНИЯ специфичности?         ',
        variants:
          ['Встроенный стиль, Селектор индентификатора (id), Селектор класса, Селектор атрибутов, Селектор псевдокласса, Селектор тегов HTML, Селектор псевдоэлементов          ',
            'Селектор псевдоэлементов, Селектор тегов HTML, Селектор псевдокласса, Селектор атрибутов, Селектор класса,Селектор индентификатора (id), Встроенный стиль            ',
            'Селектор псевдоэлементов, Селектор тегов HTML, Селектор псевдокласса, Селектор класса,Селектор индентификатора (id),Селектор атрибутов, Встроенный стиль            ',
            'Селектор атрибутов,Селектор тегов HTML,Селектор псевдоэлементов,Селектор псевдокласса, Селектор класса,Селектор индентификатора (id),Встроенный стиль            ',
        ],
        correct: 1,
      },

    ]
}

export const reactQuiz = {
    title: 'React',
    position: 4,
    path: '/reactQuestions',
    name: 'React Quiz',
    questions   : [ {
        title: 'Где правильно передана функция в качестве свойства?',
        variants:
          ['rgument={this.someFunction}',
            'argument=(this.someFunction)',
            'argument={this.someFunction ()}',
            'argument={someFunction}',
            'argument={this.someFunction {}}'],
        correct: 4,
      },
      {
        title: 'Куда можно встроить готовый код из метода render()?',
        variants:
          ['Только в div',
            'Только в тег, у которого есть id',
            'argument={this.someFunction ()}',
            'В div или же в span',
            'В любой тег'],
        correct: 4,
      },
      {
        title: 'React JS – это...',
        variants:
          ['MVC-фреймворк',
            'фреймворк',
            'Back-end платформа',
            'JavaScript библиотека',
          ],
        correct: 3,
      },
      {
        title: 'Чем свойства отличаются от состояний?',
        variants:
          ['Свойства можно изменять, состояния нельзя',
            'Свойства для работы со значениями, состояния для работы с функциями',
            'Состояния для работы со значениями, свойства для работы с функциями',
            'Состояния можно изменять, свойства нельзя',
          ],
        correct: 3,
      },
      {
        title: 'Какая компания разработала React JS?',
        variants:
          ['Twitter',
            'GitHub',
            'Google',
            'Amazon',
            'Facebook'],
        correct: 4,
      },
      {
        title: 'Как обратится к свойству weight? <Test weight="203" height="182" /> ',
        variants:
          ['{props.weight}',
            '{this.weight}',
            '{this.prop.weight}',
            '{prop.weight}',
            '{this.props.weight}'],
        correct: 4,
      },
      {
        title: 'Методы жизненного цикла в основном используются',
        variants:
          ['для отслеживания истории событий',
            'для расширения компонентов',
            'для освобождения ресурсов',
            'никакой из вышеперечисленных'],
        correct: 2,
      },
      {
        title: '… может быть выполнено, когда необходимо возвратить несколько элементов из компонента.',
        variants:
          ['Абстракция',
            'Упаковка',
            'Изоляция',
            'Обертывание',
          ],
        correct: 3,
      },
      {
        title: 'Как получить доступ к функции fetch() с элемента h1 в JSX?',
        variants:
          ['<h1>{fetch()}</h1>',
            '<h1>${fetch()}</h1>',
            '<h1>{fetch}</h1>',
            '<h1>${fetch}</h1>',
          ],
        correct: 0,
      },
      {
        title: 'Какой метод необходимо переопределить в React Component, чтобы компонент не обновлялся?',
        variants:
          ['willComponentUpdate',
            'shouldComponentUpdate',
            'componentDidUpdate',
            'componentDidMount',
          ],
        correct: 1,
      },
      {
        title: 'Что используется для передачи данных к компоненту извне?',
        variants:
          ['setState',
            'render with arguments',
            'PropTypes',
            'props',
          ],
        correct: 3,
      },
      {
        title: 'Какой метод вызывается в React Component после того, как компонент отображается в первый раз?',
        variants:
          ['componentDidUpdate',
            'componentDidMount',
            'componentMounted',
            'componentUpdated',
            ],
        correct: 1,
      },
      {
        title: 'Выберите правильный синтаксис для обработчика события “щелчок по кнопке” foo.',
        variants:
          ['<button onclick={this.foo()}>',
            '<button onclick={this.foo}>',
            '<button onClick={this.foo()}>',
            '<button onClick={this.foo}> ',
          ],
        correct: 3,
      },
      {
        title: 'Что происходит при вызове setState() в методе render()?',
        variants:
          ['На экране появляется повторяющийся вывод',
            'Ошибка клавиши дублирования',
            'Ошибка переполнения стека',
            'Ничего не происходит',
          ],
        correct: 2,
      },
    
    
      {
        title: 'Как создать встроенный стиль в JSX, указывая font-size:12px и color:red;',
        variants:
          ['style={{font-size:12,color: "red"}}',
            'style={{fontSize:"12px",color:"red"}}',
            'style={fontSize:"12px",color:"red"}',
            'style={{font-size:12px,color:"red"}}',
          ],
        correct: 1,
      },
    
      {
        title: 'Какие преимущества имеет ReactJS?',
        variants:
          ['Повышает производительность приложений с помощью Virtual DOM',
            'JSX создает код, легкий для чтения и записи',
            'Обрабатывает и на стороне клиента, и сервера',
            'Легко выполняет интеграцию с другими фреймворками (Angular, BackboneJS), так как является библиотекой с открытым исходным кодом',
            'Все вышеперечисленные'],
        correct: 4,
      },
    
      {
        title: 'Что такое состояние (state) в React?',
        variants:
          ['Постоянное хранилище',
            'Хранение внутренних данных (объекта) компонента',
    
          ],
        correct: 1,
      },
    
      {
        title: 'Что такое ReactJS?',
        variants:
          ['Фреймворк на стороне сервера',
            'Фреймворк пользовательского интерфейса',
            'Библиотека для создания интерфейсов взаимодействия',
          ],
        correct: 2,
      },
    
      {
        title: 'Выберите способы, которыми обрабатываются данные в React.',
        variants:
          ['state & props',
            'services & components',
          ],
        correct: 1,
      },
    
      {
        title: 'Какие недостатки имеет ReactJS?',
        variants:
          ['Является только уровнем просмотра, все еще есть необходимость подключить код для Ajax запросов,событий и т. д.',
            'Сама библиотека довольно большая.',
            'Процесс обучения может быть медленным.',
            'Все вышеперечисленные',
          ],
        correct: 3,
      },
    
      {
        title: 'Выберите правильный ответ касательно JSX',
        variants:
          ['JSX работает быстрее, так как он выполняет оптимизацию при компиляции кода в JavaScript',
            'JSX - это синтаксическая нотация для JavaScript XML',
            'JSX обеспечивает выразительные возможности JavaScript вместе с HTML подобно синтаксическому шаблону',
            'Все вышеперечисленные',
          ],
        correct: 3,
      },
    
      {
        title: 'React объединяет переданный вами объект c текущим состоянием (state), используя    ',
        variants:
          ['setState()',
            'State() ',
          ],
        correct: 0,
      },
    
      {
        title: 'Произвольный входной сигнал компонентов называется...',
        variants:
          ['Keys',
            'Props',
            'Elements',
            'Ref',
          ],
        correct: 1,
      },
    
      {
        title: 'ref используется для ссылки на элемент/компонент, возвращаемый...',
        variants:
          ['react()',
            'render() ',
            'reduce()',
            'refer()',
          ],
        correct: 1,
      },
    
    
      {
        title: 'Что такое HOC?',
        variants:
          ['Это технология, которая перехватывает вызовы функций и помогает использовать возможности React без написания классов. ',
            'Функция, которая на входе в параметрах принимает компонент, а на выходе возвращает новый компонент - контейнерный компонент для переданного в параметрах компонента.        ',
            'Это чистая функция, которая принимает старый state, принимает action , если нужно этот action применяет к этому state (по правилам эмьютабельности) и возвращает новый state либо возвращает этот же state который был не изменённый.   ',
          ],
        correct: 1,
      },
    
      {
        title: 'Что такое Reducer ?',
        variants:
          ['Это технология, которая перехватывает вызовы функций и помогает использовать возможности React без написания классов. ',
            'Функция, которая на входе в параметрах принимает компонент, а на выходе возвращает новый компонент - контейнерный компонент для переданного в параметрах компонента.       ',
            'Это чистая функция, которая принимает старый state, принимает action , если нужно этот action применяет к этому state (по правилам эмьютабельности) и возвращает новый state либо возвращает этот же state который был не изменённый.    ',
           
          ],
        correct: 2,
      },
    
      {
        title: 'Что такое Hook ?',
        variants:
          ['Это технология, которая перехватывает вызовы функций и помогает использовать возможности React без написания классов.',
            'Функция, которая на входе в параметрах принимает компонент, а на выходе возвращает новый компонент - контейнерный компонент для переданного в параметрах компонента. ',
            'Это чистая функция, которая принимает старый state, принимает action , если нужно этот action применяет к этому state (по правилам эмьютабельности) и возвращает новый state либо возвращает этот же state который был не изменённый.',
          ],
        correct: 0,
      },

      {
        title: 'Зачем нужен Redux?',
        variants:
          ['Предоставляет возможность создать store',
            'Это библиотека которая отрисовывает UI',
            'Это технология, которая перехватывает вызовы функций и помогает использовать возможности React без написания классов. ',
          ],
        correct: 0,
      },
      
      {
        title: 'Что делает метод Srore getState()?',
        variants:
          ['Отправляет экшен. Это единственный способ изменить состояние.',
            'Возвращает текущее состояние вашего приложения. Оно равно последнему возвращенному значению из редюсера стора.  ',
            'Добавляет слушателя. Он будет вызываться каждый раз, когда экшен отправлен и некоторая часть дерева состояния могла потенциально измениться. ',
            'Заменяет редюсер, который в настоящее время используется стором, чтобы вычислить состояние. ',
            
          ],
        correct: 1,
      },

      {
        title: 'Что делает метод Srore replaceReducer(nextReducer)?',
        variants:
          ['Отправляет экшен. Это единственный способ изменить состояние. ',
            'Возвращает текущее состояние вашего приложения. Оно равно последнему возвращенному значению из редюсера стора. ',
            'Добавляет слушателя. Он будет вызываться каждый раз, когда экшен отправлен и некоторая часть дерева состояния могла потенциально измениться.',
            'Заменяет редюсер, который в настоящее время используется стором, чтобы вычислить состояние. ',
            
          ],
        correct: 3,
      },
      {
        title: 'Что делает метод Srore subscribe(listener)?',
        variants:
          ['Отправляет экшен. Это единственный способ изменить состояние. ',
            'Возвращает текущее состояние вашего приложения. Оно равно последнему возвращенному значению из редюсера стора.',
            'Добавляет слушателя. Он будет вызываться каждый раз, когда экшен отправлен и некоторая часть дерева состояния могла потенциально измениться.',
            'Заменяет редюсер, который в настоящее время используется стором, чтобы вычислить состояние.',
            
          ],
        correct: 2,
      },
      {
        title: 'Что делает метод Srore dispatch(action)?',
        variants:
          ['Отправляет экшен. Это единственный способ изменить состояние.',
            'Возвращает текущее состояние вашего приложения. Оно равно последнему возвращенному значению из редюсера стора. ',
            'Добавляет слушателя. Он будет вызываться каждый раз, когда экшен отправлен и некоторая часть дерева состояния могла потенциально измениться. ',
            'Заменяет редюсер, который в настоящее время используется стором, чтобы вычислить состояние. ',
            
          ],
        correct: 0,
      },

      {
        title: 'Функциональный Компонент в React это ',
        variants:
          ['Функция, которая принимает props, вызывается и возвращают новый state ',
            'Функция, которая представляет из себя middleware, которая добавляется в Redux и позволяет использовать ассинхронный код внутри dispatch().  ',
            'Функция, которая принимает props и возвращет JSX  ',
            'Функция, с помощью которого React создает объект и использует методы жизненного цикла ',
            
          ],
        correct: 2,
      },
      {
        title: 'Классовый Компонент в React это  ',
        variants:
          ['Пользовательский компонент, который принимает props, вызывается и возвращают новый state ',
            'Пользовательский компонент, который представляет из себя middleware, которая добавляется в Redux и позволяет использовать ассинхронный код внутри dispatch().       ',
            'Пользовательский компонент, который принимает props и возвращет JSX   ',
            'Пользовательский компонент,построенный на основе классов, с помощью которого React создает объект и использует методы жизненного цикла',
            
          ],
        correct: 3,
      },
      {
        title: 'Единственный обязательный метод в классовом компоненте?',
        variants:
          ['render()',
            'componentDidMount()',
            'mapStateToProps()',
            'mapDispatchToProps()',
            'componentDidUpdate()'
          ],
        correct: 0,
      },

      {
        title: 'Этот метод жизненного цикла вызывается при удалении компонента из DOM.',
        variants:
          ['componentDidMount()',
            'componentWillUnmount()',
            'componentDidUpdate()',
            
          ],
        correct: 1,
      },
      {
        title: 'Этот метод жизненного цикла вызывается сразу после обновления. Не вызывается при первом рендере.  ?',
        variants:
          ['componentDidUpdate()',
            'componentWillUnmount()',
            'componentDidMount()',
           
          ],
        correct: 0,
      },
      
      {
        title: 'Этот метод жизненного цикла вызывается сразу после монтирования(то есть вставки компонента в DOM). Это хорошее место для создания сетевых запросов.',
        variants:
          ['componentWillUnmount()',
            'componentDidUpdate()',
            'componentDidMount()',
            
          ],
        correct: 2,
      },
      {
        title: 'Что такое reducer?',
        variants:
          ['Функция, которая возвращает нам объект action',
            'Это чистая функция, которая принимает старый state, принимает action, если нужно - этот action применяется к этому state(по правилам эмьютабельности) и возвращает новый state, либо возвращает этот же state, который был не измененный, который пришел в этот reducer.',
            'Это объект, в котором инкапсулированны все данныы для того, что action получил эти данные и применил изменения на свой state ',
            'Это функция, которая принимает весь state целиком, достает из него то, что нужно и возвращает в бизнес. ',
            
          ],
        correct: 1,
      },
      {
        title: 'Что такое Action Creator?',
        variants:
          ['Функция, которая возвращает нам объект action',
            'Это чистая функция, которая принимает старый state, принимает action, если нужно - этот action применяется к этому state(по правилам эмьютабельности) и возвращает новый state, либо возвращает этот же state, который был не измененный, который пришел в этот reducer.',
            'Это объект, в котором инкапсулированны все данныe для того, что action получил эти данные и применил изменения на свой state ',
            'Это функция, которая принимает весь state целиком, достает из него то, что нужно и возвращает в бизнес.',
           
          ],
        correct: 0,
      },
      {
        title: 'Что такое Action?',
        variants:
          ['Это объект, в котором инкапсулированны все данныы для того, что reducer получил эти данные и применил изменения на свой state ',
            'Это чистая функция, которая принимает старый state, возвращает новый state, либо возвращает этот же state, который был не измененный, который пришел в reducer. ',
            'Функция, которая возвращает нам новый state.',
            'Функция, которая отправляет данные в reduser. Это единственный способ изменить state приложения.',
           
          ],
        correct: 0,
      },
      {
        title: 'Что такое Dispatch?',
        variants:
          ['Функция, которая отправляет action. Это единственный способ изменить state приложения. ',
            'Это функция, которая принимает весь state целиком, достает из него то, что нужно и возвращает в бизнес. ',
            'Функция, которая возвращает нам новый state.',
            'Это объект, в котором инкапсулированны все данныы для того, что reducer получил эти данные и применил изменения на свой state',
          
          ],
        correct: 0,
      },
      
      {
        title: 'Что такое Selector?',
        variants:
          ['Функция, которая отправляет action. Это единственный способ изменить state приложения. ',
            'Это объект, в котором инкапсулированны все данныы для того, что reducer получил эти данные и применил изменения на свой state ',
            'Функция, которая возвращает нам новый state. ',
            'Это функция, которая принимает весь state целиком, достает из него то, что нужно и возвращает в бизнес. ',
            
          ],
        correct: 3,
      },



      {
        title: 'Этот метод жизненного цикла вызывается сразу после обновления. Не вызывается при первом рендере.  ?',
        variants:
          ['componentDidUpdate',
            'coomponentWillUnmount',
            'componentDidMount',
           
          ],
        correct: 0,
      },

      {
        title: 'Этот метод жизненного цикла вызывается сразу после обновления. Не вызывается при первом рендере.  ?',
        variants:
          ['componentDidUpdate',
            'coomponentWillUnmount',
            'componentDidMount',
           
          ],
        correct: 0,
      },
      
    ]
}


